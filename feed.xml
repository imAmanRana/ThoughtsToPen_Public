<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://thoughtstopen.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://thoughtstopen.com/" rel="alternate" type="text/html" /><updated>2023-10-17T23:05:43-06:00</updated><id>https://thoughtstopen.com/feed.xml</id><title type="html">Thoughts To Pen</title><subtitle>My thoughts on Computer Programming || Psychology || Personal Finances || &amp; much more...</subtitle><entry><title type="html">Sequenced Collections (Java 21)</title><link href="https://thoughtstopen.com/java-21-sequenced-collections/" rel="alternate" type="text/html" title="Sequenced Collections (Java 21)" /><published>2023-10-17T21:45:00-06:00</published><updated>2023-10-17T21:45:00-06:00</updated><id>https://thoughtstopen.com/java-21-sequenced-collections</id><content type="html" xml:base="https://thoughtstopen.com/java-21-sequenced-collections/"><![CDATA[<h1 id="sequenced-collection">Sequenced Collection</h1>
<p>Its a great addition to the existing Collection framework which allows access to the first and last elements of a collection out-of-the-box (using its default methods). Apart from this, it also allow us to get the reversed view of our Collection.</p>

<p>Sequenced Collections are part of <a href="https://openjdk.org/jeps/431" target="_blank">JPE-431</a>.</p>

<p>Sequenced Collection introduced 3 new interfaces in the Collection framework hierarchy.</p>
<ol>
  <li>SequencedCollection</li>
  <li>SequencedSet</li>
  <li>SequencedMap</li>
</ol>

<p><img src="https://cr.openjdk.org/~smarks/collections/SequencedCollectionDiagram20220216.png" alt="Image shows new Collection interfaces introduced in the java Collection framework." title="Hierarchy of New Interfaces introduced in Java 21 Collection Framework" /></p>

<p>Lets discuss more about them in details.</p>

<ol>
  <li>
    <h3 id="sequencedcollection-interface">SequencedCollection Interface</h3>
    <p>The <strong>SequencedCollection</strong> interface introduced methods to add, get, and remove elements from the ends of the collection. It also provides a <em>reversed()</em> method which provides a reverse order view of the collection object.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">SequencedCollection</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="nc">Collection</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="o">{</span>
   	<span class="nc">SequencedCollection</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="nf">reversed</span><span class="o">();</span>
	  	
   	<span class="k">default</span> <span class="kt">void</span> <span class="nf">addFirst</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span>
	  	
   	<span class="k">default</span> <span class="kt">void</span> <span class="nf">addLast</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span>
	  	
   	<span class="k">default</span> <span class="no">E</span> <span class="nf">getFirst</span><span class="o">()</span>
	  	
   	<span class="k">default</span> <span class="no">E</span> <span class="nf">getLast</span><span class="o">()</span>
	  	
   	<span class="k">default</span> <span class="no">E</span> <span class="nf">removeFirst</span><span class="o">()</span>
	  	
   	<span class="k">default</span> <span class="no">E</span> <span class="nf">removeLast</span><span class="o">()</span>
    <span class="o">}</span>
</code></pre></div>    </div>
    <p>Except for reversed(), all other are default operations.
For Example:</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">integerList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
   <span class="n">integerList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span> <span class="c1">//[100]</span>
	
   <span class="n">integerList</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="mi">50</span><span class="o">);</span> <span class="c1">//[50,100]</span>
   <span class="n">integerList</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="mi">150</span><span class="o">);</span> <span class="c1">//[50,100,150]</span>
		
   <span class="n">integerList</span><span class="o">.</span><span class="na">getFirst</span><span class="o">();</span> <span class="c1">//50</span>
   <span class="n">integerList</span><span class="o">.</span><span class="na">getLast</span><span class="o">();</span> <span class="c1">//150</span>
		
   <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">integerList</span><span class="o">.</span><span class="na">reversed</span><span class="o">());</span> <span class="c1">//[150,100,50]</span>
	  
   <span class="c1">//integerList = [50,100,150]</span>
   <span class="n">integerList</span><span class="o">.</span><span class="na">removeFirst</span><span class="o">();</span> <span class="c1">//[100,150]</span>
   <span class="n">integerList</span><span class="o">.</span><span class="na">removeLast</span><span class="o">();</span> <span class="c1">//[100]</span>
</code></pre></div>    </div>
  </li>
  <li>
    <h3 id="sequencedset-interface">SequencedSet Interface</h3>
    <p>SequencedSet interface extends SequencedCollection and is specific to the <em>Set</em> implementation.</p>
  </li>
</ol>

<p>TBC‚Ä¶‚Ä¶ ü´°</p>]]></content><author><name></name></author><category term="programming" /><category term="java" /><category term="sequenced collections" /><category term="java21" /><summary type="html"><![CDATA[Sequenced Collections introduced in Java 21]]></summary></entry><entry><title type="html">Virtual Threads (Java 21)</title><link href="https://thoughtstopen.com/java-21-virtual-threads/" rel="alternate" type="text/html" title="Virtual Threads (Java 21)" /><published>2023-10-12T21:55:00-06:00</published><updated>2023-10-12T21:55:00-06:00</updated><id>https://thoughtstopen.com/java-21-virtual-threads</id><content type="html" xml:base="https://thoughtstopen.com/java-21-virtual-threads/"><![CDATA[<h1 id="virtual-threads">Virtual Threads</h1>
<p><strong>NOTE</strong>: This is a preview feature  <em>NOT</em>  enabled by-default in JDK-21.</p>

<p>Virtual Threads are introduced under <strong>Project Loom</strong> and are part of <a href="https://openjdk.org/jeps/436" target="_blank">JPE-436</a>.</p>

<p>We all might have heard about Threads in Java. They are old, very old, since JDK 2 released in 1998. üï∞</p>

<p>They did a very good job in concurrent processing. But we must admit, in this ever changing world of programming, they have few problems:</p>
<ol>
  <li>Even though they were light weight processes, but the Threads were just a thin wrapper around the operating system threads (the OS Threads).
It was costly to create them and having a number of Threads running concurrently was practically limited by the system‚Äôs hardware, since <strong>they are mapped 1:1 to the OS threads</strong>.</li>
  <li>With the advancements in the J2EE, every incoming request is handled by a thread (<em>thread-per-request</em> pattern). In the today‚Äôs world of microservices, a single request can fetch or update data on multiple systems. When the application waits for the response from other microservices, the current thread remains in the idle state.</li>
  <li>Also, with the advent of Reactive Programming, much of the request-response have gone asynchronous. Information is request by a separate thread and the response is accepted on a separate thread, it makes it very difficult to debug. üòÆ‚Äçüí®</li>
</ol>

<h3 id="virtual-threads-1">Virtual Threads</h3>
<p>Virtual Threads are also instances of <em>java.lang.Thread</em>. They run their code on the underlying OS thread, but <strong>DON‚ÄôT block the OS thread for its entire execution</strong>. Multiple virtual threads can be associated to a single OS thread.</p>

<p><img src="/assets/img/VirtualThreads.png" alt="Virtual Thread's hierarchical diagram " title="Hierarchy Diagram for Virtual Threads" /></p>

<p>We can create millions ($ 10^ 6 $) of virtual threads independent of our system hardware. Virtual Threads are managed by JVM, so the overhead of context-switching is avoided.</p>

<p>Virtual Threads do not block OS threads while they are not running. They are best suited for asynchronous APIs for achieving high scalability and throughput.</p>

<h2 id="differences-between-classic-threads-and-virtual-threads">Differences between Classic Threads and Virtual Threads</h2>

<ul>
  <li><strong>Virtual Threads are daemon threads</strong>: Means JVM won‚Äôt wait for them to be completed when exiting.</li>
  <li><strong>Virtual Threads always have normal priority</strong>.</li>
  <li><strong>Virtual Threads are not active members of thread group.</strong>: Call to <em>Thread.getThreadGroup()</em> on a virtual thread gives a generic name ‚Äú<em>VirtualThreads</em>‚Äù.</li>
  <li><strong>Virtual Threads do not support <em>stop()</em>, <em>resume()</em> or <em>suspend()</em> methods</strong>.</li>
</ul>

<h2 id="execution-and-performance-comparison-of-classic-threads-and-virtual-threads">Execution and Performance Comparison of Classic Threads and Virtual Threads</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutorService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.concurrent.atomic.AtomicInteger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.IntStream</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">VirtualThreads</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
		<span class="kd">final</span> <span class="nc">AtomicInteger</span> <span class="n">increment</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AtomicInteger</span><span class="o">();</span>
		<span class="nc">Runnable</span> <span class="n">runnable</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
			<span class="k">try</span> <span class="o">{</span>
				<span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
			<span class="o">}</span>
		<span class="o">};</span>

		<span class="c1">// Classic Threads</span>
		<span class="kt">long</span> <span class="n">startTime</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
		<span class="k">try</span> <span class="o">(</span><span class="kt">var</span> <span class="n">executor</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">100</span><span class="o">))</span> <span class="o">{</span>
			<span class="nc">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">10_000</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="n">runnable</span><span class="o">));</span>
		<span class="o">}</span>
		<span class="kt">long</span> <span class="n">endTime</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Classic Threads Total Time Taken: %d milliseconds"</span><span class="o">,</span> <span class="n">endTime</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">));</span>

		<span class="c1">// Virtual Threads</span>
		<span class="n">startTime</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
		<span class="k">try</span> <span class="o">(</span><span class="kt">var</span> <span class="n">executor</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newVirtualThreadPerTaskExecutor</span><span class="o">())</span> <span class="o">{</span>
			<span class="nc">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">10_000</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="n">runnable</span><span class="o">));</span>
		<span class="o">}</span>
		<span class="n">endTime</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Virtual Threads Total Time Taken: %d milliseconds"</span><span class="o">,</span> <span class="n">endTime</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">));</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<p>Since its a preview feature, similar to <a href="/java-21-String-Templates/">String Templates</a>, they are NOT enabled by default. Run the above code as:</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java <span class="nt">--enable-preview</span> <span class="nt">--source</span> 21 VirtualThreads.java
</code></pre></div></div>
<p>Output is:</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Classic Threads Total Time Taken: 100798 milliseconds
Virtual Threads Total Time Taken: 1823 milliseconds
</code></pre></div></div>
<p>This huge difference in the execution time is due to the fact that the Executor service have created around 10K Virtual Threads since they are very light weight and doesn‚Äôt require overhead of context switching as Classic threads do.</p>

<p>I tried experimenting with the fixed pool size of Classic threads. Even when I increased its size to 10K via <code class="language-plaintext highlighter-rouge">Executors.newFixedThreadPool(10000)</code>, I still got better performance for Virtual Threads (~3x more faster).</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Classic Threads Total Time Taken: 3569 milliseconds
Virtual Threads Total Time Taken: 1366 milliseconds
</code></pre></div></div>]]></content><author><name></name></author><category term="programming" /><category term="java" /><summary type="html"><![CDATA[Virtual Threads NOTE: This is a preview feature NOT enabled by-default in JDK-21.]]></summary></entry><entry><title type="html">String Templates (Java 21)</title><link href="https://thoughtstopen.com/java-21-String-Templates/" rel="alternate" type="text/html" title="String Templates (Java 21)" /><published>2023-10-12T21:41:00-06:00</published><updated>2023-10-12T21:41:00-06:00</updated><id>https://thoughtstopen.com/java-21-String-Templates</id><content type="html" xml:base="https://thoughtstopen.com/java-21-String-Templates/"><![CDATA[<h1 id="string-templates">String Templates</h1>
<p><strong>NOTE</strong>: This is a preview feature  <em>NOT</em>  enabled by-default in JDK-21.</p>

<p>String Templates are introduced as per java specification <a href="https://openjdk.org/jeps/430" title="JEP 430: String Templates (Preview)" target="_blank">JPE-430</a>.</p>

<p>They provide a way to introduce variables into strings which are resolved during runtime.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringTemplate</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">"T2P"</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="n">message</span> <span class="o">=</span> <span class="no">STR</span><span class="o">.</span><span class="s">"Greetings from \{name}!"</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>	<span class="c1">//Expected Output: Greetings from T2P!</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Lets say we run this program via command prompt</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java StringTemplate.java
</code></pre></div></div>
<p>This code will not compile and we‚Äôll get below errors</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>StringTemplate.java:4: error: string templates are a preview feature and are disabled by default.
        private static String message <span class="o">=</span> STR.<span class="s2">"Greetings from </span><span class="se">\{</span><span class="s2">name}!"</span><span class="p">;</span>
                                            ^
  <span class="o">(</span>use <span class="nt">--enable-preview</span> to <span class="nb">enable </span>string templates<span class="o">)</span>
1 error
error: compilation failed
</code></pre></div></div>

<p>So in order to resolve it, we need to enable the preview feature using <code class="language-plaintext highlighter-rouge">--enable-preview</code> for jdk 21 using <code class="language-plaintext highlighter-rouge">--source 21</code></p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java <span class="nt">--enable-preview</span> <span class="nt">--source</span> 21 StringTemplate.java
</code></pre></div></div>

<p>Now we can see the program compiles correctly and produces the below output</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Note: StringTemplate.java uses preview features of Java SE 21.
Note: Recompile with <span class="nt">-Xlint</span>:preview <span class="k">for </span>details.
Greetings from T2P!
</code></pre></div></div>

<p>Finally we got our code running ü§©.</p>

<p>Few more points on <em>String Templates</em></p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">STR</code> template processor is the part of the language and is automatically included in every class.</li>
  <li>Not only local variables but methods and instance variables are also supported.
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nc">String</span> <span class="n">message</span> <span class="o">=</span> <span class="no">STR</span><span class="o">.</span><span class="s">"Greetings from \{name}!"</span><span class="o">;</span>        <span class="c1">//local variable</span>
  <span class="nc">String</span> <span class="n">message</span> <span class="o">=</span> <span class="no">STR</span><span class="o">.</span><span class="s">"Greetings from \{getName()}!"</span><span class="o">;</span>   <span class="c1">//method</span>
  <span class="nc">String</span> <span class="n">message</span> <span class="o">=</span> <span class="no">STR</span><span class="o">.</span><span class="s">"Greetings from \{this.name}!"</span><span class="o">;</span>   <span class="c1">//instance variable</span>
</code></pre></div>    </div>
  </li>
  <li>Mathematical Expressions too.
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="o">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">30</span><span class="o">;</span>
  <span class="nc">String</span> <span class="n">result</span> <span class="o">=</span> <span class="no">STR</span><span class="o">.</span><span class="s">"\{a+b}"</span><span class="o">;</span>	<span class="c1">//40</span>
</code></pre></div>    </div>
  </li>
  <li>Double quotes need not to be escaped in String Templates
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kt">boolean</span> <span class="n">test</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
  <span class="nc">String</span> <span class="n">msg</span> <span class="o">=</span> <span class="no">STR</span><span class="o">.</span><span class="s">"The result is \{ test? "</span><span class="kc">true</span><span class="s">" : "</span><span class="kc">false</span><span class="s">" }."</span><span class="o">;</span>	<span class="c1">//The result is true.</span>
</code></pre></div>    </div>
  </li>
  <li>Multi-line expressions are allowed too.
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kn">import</span> <span class="nn">java.time.LocalDateTime</span><span class="o">;</span>
  <span class="nc">String</span> <span class="n">currentDateTime</span> <span class="o">=</span> <span class="no">STR</span><span class="o">.</span><span class="s">"Current Date and Time is: \{
  LocalDateTime.now()
  }"</span><span class="o">;</span>
  <span class="c1">//Current Date and Time is: 2023-10-07T08:55:36.874386100</span>
</code></pre></div>    </div>
  </li>
</ol>]]></content><author><name></name></author><category term="programming" /><category term="java" /><summary type="html"><![CDATA[String Templates introduced in Java 21]]></summary></entry><entry><title type="html">Java 21 Features</title><link href="https://thoughtstopen.com/java-21-features/" rel="alternate" type="text/html" title="Java 21 Features" /><published>2023-10-07T20:11:00-06:00</published><updated>2023-10-07T20:11:00-06:00</updated><id>https://thoughtstopen.com/java-21-features</id><content type="html" xml:base="https://thoughtstopen.com/java-21-features/"><![CDATA[<ul>
  <li>
    <h2 id="string-templates-preview-feature"><a href="/java-21-String-Templates/">String Templates (Preview Feature)</a></h2>
    <p>String Templates allow us to embed expressions (variables, methods or fields) into Strings, which are evaluated at runtime.</p>
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">"T2P"</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="n">message</span> <span class="o">=</span> <span class="no">STR</span><span class="o">.</span><span class="s">"Greetings from \{name}!"</span><span class="o">;</span>	<span class="c1">//Greetings from T2P!</span>
</code></pre></div>    </div>
  </li>
  <li>
    <h2 id="virtual-threads"><a href="/java-21-virtual-threads/">Virtual Threads</a></h2>
    <p>Virtual Threads are JVM managed lightweight threads. Lighter than the traditional Threads.</p>
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Executors</span><span class="o">.</span><span class="na">newVirtualThreadPerTaskExecutor</span><span class="o">();</span>
</code></pre></div>    </div>
  </li>
  <li>
    <h2 id="sequenced-collections"><a href="/java-21-sequenced-collections/">Sequenced Collections</a></h2>
    <p>New interface <strong>Sequenced Collection</strong> is introduced in the Collections framework which provides new functionality of <em>defined encounter order</em>, which means, we will have a well-defined order for first element, second element, upto the last element.</p>
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">integerList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
  <span class="n">integerList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span> <span class="c1">//[100]</span>
	
  <span class="n">integerList</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="mi">50</span><span class="o">);</span> <span class="c1">//[50,100]</span>
  <span class="n">integerList</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="mi">150</span><span class="o">);</span> <span class="c1">//[50,100,150]</span>
	
  <span class="n">integerList</span><span class="o">.</span><span class="na">getFirst</span><span class="o">();</span> <span class="c1">//50</span>
  <span class="n">integerList</span><span class="o">.</span><span class="na">getLast</span><span class="o">();</span> <span class="c1">//150</span>
</code></pre></div>    </div>
  </li>
</ul>]]></content><author><name></name></author><category term="programming" /><category term="java" /><summary type="html"><![CDATA[All new features introduced in Java 21]]></summary></entry><entry><title type="html">U$A ‡®ï‡©à‡®´‡©á‡®ü‡©á‡®∞‡©Ä‡®Ü</title><link href="https://thoughtstopen.com/usa-cafeteria/" rel="alternate" type="text/html" title="U$A ‡®ï‡©à‡®´‡©á‡®ü‡©á‡®∞‡©Ä‡®Ü" /><published>2023-02-22T20:40:00-07:00</published><updated>2023-02-22T20:40:00-07:00</updated><id>https://thoughtstopen.com/usa-cafeteria</id><content type="html" xml:base="https://thoughtstopen.com/usa-cafeteria/"><![CDATA[<p>‡®Ö‡©∞‡®¨‡®∞ ‡®®‡©Ç‡©∞ ‡®ï‡®à ‡®µ‡®∞‡©ç‡®π‡©á ‡®π‡©ã ‡®ó‡®è ‡®∏‡®® ‡®Æ‡®ú‡®º‡®¶‡©Ç‡®∞‡©Ä ‡®ï‡®∞‡®¶‡©á ‡®™‡®∞ ‡®â‡®∏‡®¶‡©Ä ‡®ï‡®Æ‡®æ‡®à ‡®®‡®æ‡®≤‡®º ‡®®‡®æ ‡®§‡®æ‡®Ç ‡®ú‡©Ç‡®® ‡®ó‡©Å‡®ú‡®º‡®æ‡®∞‡®æ ‡®ö‡©±‡®≤‡®¶‡®æ ‡®∏‡©Ä ‡®§‡©á ‡®®‡®æ ‡®π‡©Ä ‡®â‡®∏ ‡®¶‡©Ä ‡®Ü‡®§‡®Æ‡®æ ‡®®‡©Ç‡©∞ ‡®§‡©ç‡®∞‡®ø‡®™‡®§‡©Ä ‡®Æ‡®ø‡®≤‡®¶‡©Ä ‡®∏‡©Ä‡•§ ‡®â‡®∏ ‡®¶‡©á ‡®π‡®æ‡®≤‡®æ‡®§ ‡®Æ‡®æ‡©ú‡©á ‡®∏‡®® ‡®ï‡®ø‡®â‡®Ç‡®ï‡®ø ‡®â‡®π ‡®ó‡®∞‡©Ä‡®¨ ‡®§‡©á ‡®Ö‡®≤‡®™ ‡®∏‡®ø‡©±‡®ñ‡®ø‡®Ö‡®§ ‡®∏‡©Ä‡•§ ‡®â‡®π ‡®¨‡©ú‡©Ä ‡®µ‡®ø‡®≤‡©±‡®ñ‡®£ ‡®∏‡©ã‡®ö ‡®µ‡®æ‡®≤‡®º‡®æ ‡®á‡®®‡®∏‡®æ‡®® ‡®∏‡©Ä‡•§ ‡®∏‡®≠‡®§‡©ã‡®Ç ‡®Ö‡®≤‡©±‡®ó ‡®∏‡©ã‡®ö‡®£ ‡®¶‡©Ä ‡®â‡®∏‡®¶‡©Ä ‡®Ü‡®¶‡®§ ‡®â‡®∏‡®®‡©Ç‡©∞ ‡®¶‡©Ç‡®ú‡®ø‡®Ü‡®Ç ‡®§‡©ã‡®Ç ‡®µ‡©±‡®ñ ‡®ï‡®∞‡®¶‡©Ä ‡®∏‡©Ä‡•§ ‡®â‡®∏‡®¶‡©á ‡®Ü‡®≤‡®º‡©á ‡®¶‡©Å‡®Ü‡®≤‡®º‡©á ‡®¶‡©á ‡®≤‡©ã‡®ï ‡®§‡©á ‡®∏‡®æ‡®ï ‡®∏‡®¨‡©∞‡®ß‡©Ä ‡®â‡®∏‡®®‡©Ç‡©∞ ‡®õ‡©ã‡®ü‡©Ä ‡®∏‡©ã‡®ö ‡®µ‡®æ‡®≤‡®º‡®æ ‡®Ü‡®ñ‡®º‡®¶‡©á ‡®∏‡®®‡•§ ‡®â‡®Æ‡®∞ ‡®¶‡©á ‡®§‡®ø‡©∞‡®® ‡®¶‡®π‡®æ‡®ï‡®ø‡®Ü‡®Ç ‡®§‡©ã‡®Ç ‡®µ‡©±‡®ß ‡®∏‡®Æ‡©á‡®Ç ‡®µ‡®ø‡©±‡®ö ‡®â‡®∏‡®®‡©á ‡®ú‡®º‡®ø‡©∞‡®¶‡®ó‡©Ä ‡®¶‡©á ‡®ï‡®à ‡®â‡®§‡®æ‡®∞ ‡®ö‡©ú‡©ç‡®π‡®æ‡®Ö ‡®µ‡©á‡®ñ‡©á ‡®∏‡®®‡•§ ‡®π‡®∞ ‡®•‡®æ‡®Ç ‡®§‡©ã‡®Ç ‡®Ö‡®∏‡®´‡®º‡®≤‡®§‡®æ, ‡®ß‡©ã‡®ñ‡©á ‡®§‡©á ‡®®‡®æ‡®ï‡®æ‡®Æ‡©Ä‡®Ü‡®Ç ‡®â‡®∏ ‡®¶‡©á ‡®™‡©±‡®≤‡©á ‡®Ü‡®à‡®Ü‡®Ç ‡®∏‡®®‡•§ ‡®â‡®Æ‡®∞ ‡®§‡©ã‡®Ç ‡®ï‡®ø‡®§‡©á ‡®™‡®π‡®ø‡®≤‡®æ‡®Ç ‡®π‡©Ä ‡®â‡®π ‡®¨‡©Å‡©±‡®¢‡®æ ‡®¶‡®ø‡®∏‡®£ ‡®≤‡©±‡®ó ‡®™‡®ø‡®Ü ‡®∏‡©Ä‡•§ ‡®â‡®π ‡®ï‡®¶‡©á ‡®ï‡®¶‡©á ‡®ñ‡©Å‡®¶‡®ï‡©Å‡®∏‡®º‡©Ä ‡®ï‡®∞‡®® ‡®¨‡®æ‡®∞‡©á ‡®∏‡©ã‡®ö‡®¶‡®æ ‡®™‡®∞ ‡®Æ‡©å‡®§ ‡®µ‡©Ä ‡®â‡®π‡®®‡©Ç‡©∞ ‡®ß‡©ã‡®ñ‡®æ ‡®®‡®æ ‡®¶‡©á ‡®ú‡®æ‡®µ‡©á ‡®á‡®π ‡®ñ‡®º‡®ø‡®Ü‡®≤ ‡®ï‡®∞ ‡®ï‡©á ‡®â‡®π ‡®∞‡©Å‡®ï ‡®ú‡®æ‡®Ç‡®¶‡®æ‡•§ ‡®â‡®π ‡®∞‡©ã ‡®µ‡©Ä ‡®®‡®π‡©Ä‡®Ç ‡®∏‡©Ä ‡®∏‡®ï‡®¶‡®æ ‡®ï‡®ø‡®â‡®Ç‡®ï‡®ø ‡®¶‡©Å‡©±‡®ñ‡®æ‡®Ç ‡®¶‡©Ä‡®Ü‡®Ç ‡®π‡®®‡©á‡®∞‡©Ä‡®Ü‡®Ç ‡®®‡©á ‡®â‡®∏ ‡®¶‡©Ä‡®Ü‡®Ç ‡®Ö‡©±‡®ñ‡®æ‡®Ç ‡®¶‡©á ‡®∏‡®Æ‡©Å‡©∞‡®¶‡®∞ ‡®µ‡©Ä ‡®∏‡©Å‡®ï‡®æ ‡®¶‡®ø‡©±‡®§‡©á ‡®∏‡®®‡•§ ‡®á‡©±‡®ï ‡®ñ‡®æ‡®≤‡©Ä‡®™‡®£ ‡®â‡®∏ ‡®¶‡©Ä ‡®ú‡®º‡®ø‡©∞‡®¶‡®ó‡©Ä ‡®µ‡®ø‡©±‡®ö ‡®™‡®∏‡®∞ ‡®ó‡®ø‡®Ü ‡®∏‡©Ä‡•§ ‡®ú‡©ã ‡®â‡®∏ ‡®â‡©±‡®§‡©á ‡®¨‡©Ä‡®§ ‡®∞‡®π‡©Ä ‡®∏‡©Ä, ‡®â‡®π ‡®â‡®π ‡®π‡©Ä ‡®ú‡®æ‡®£‡®¶‡®æ ‡®∏‡©Ä‡•§ ‡®á‡©±‡®ï ‡®¶‡®ø‡®® ‡®â‡®∏ ‡®¶‡®æ ‡®á‡©±‡®ï ‡®∞‡®ø‡®∏‡®º‡®§‡©á‡®¶‡®æ‡®∞ ‡®Ö‡®®‡®Æ‡©ã‡®≤ ‡®â‡®∏ ‡®®‡©Ç‡©∞ ‡®Æ‡®ø‡®≤‡®£ ‡®Ü‡®á‡®Ü‡•§
‡®Ö‡®®‡®Æ‡©ã‡®≤ ‡®ú‡®æ‡®∞‡®ú‡©Ä‡®Ü ‡®µ‡®ø‡©±‡®ö ‡®™‡®∞‡®Æ‡®æ‡®®‡©à‡®Ç‡®ü ‡®∞‡©á‡®ú‡©Ä‡®°‡©á‡®Ç‡®ü(PR) ‡®∏‡©Ä‡•§ ‡®â‡®∏ ‡®¶‡©Ä ‡®´‡©à‡®Æ‡®ø‡®≤‡©Ä ‡®µ‡©Ä ‡®â‡©±‡®•‡©á ‡®π‡©Ä ‡®∏‡©à‡®ü‡®≤ ‡®∏‡©Ä‡•§ ‡®ö‡®æ‡®π ‡®™‡®æ‡®£‡©Ä ‡®Æ‡®ó‡®∞‡©ã‡®Ç ‡®ò‡©∞‡®ü‡®æ ‡®≠‡®∞ ‡®ó‡©±‡®≤‡®æ‡®Ç ‡®π‡©Å‡©∞‡®¶‡©Ä‡®Ü‡®Ç ‡®∞‡®π‡©Ä‡®Ü‡®Ç‡•§ ‡®´‡®ø‡®∞ ‡®Ö‡©∞‡®¨‡®∞ ‡®ï‡®ø‡®∏‡©á ‡®ï‡©∞‡®Æ ‡®ï‡®Æ‡®∞‡©á ‡®§‡©ã‡®Ç ‡®¨‡®æ‡®π‡®∞ ‡®ö‡®≤‡®æ ‡®ó‡®ø‡®Ü‡•§ ‡®Ö‡®®‡®Æ‡©ã‡®≤ ‡®¶‡©Ä ‡®®‡®ú‡®º‡®∞ ‡®â‡®∏ ‡®¶‡©Ä ‡®ü‡©á‡®¨‡®≤ ‚Äò‡®§‡©á ‡®á‡©±‡®ï ‡®®‡©ã‡®ü‡®¨‡©Å‡©±‡®ï ‚Äò‡®§‡©á ‡®™‡®à‡•§ ‡®â‡®∏ ‡®µ‡®ø‡©±‡®ö ‡®≤‡®ø‡®ñ‡®ø‡®Ü ‡®π‡©ã‡®á‡®Ü ‡®∏‡©Ä  <em>U$A Cafeteria</em>‡•§ ‡®Ö‡®®‡®Æ‡©ã‡®≤ ‡®®‡©á ‡®™‡©∞‡®®‡®æ ‡®™‡®≤‡®ü‡®ø‡®Ü ‡®§‡®æ‡®Ç ‡®á‡©±‡®ï ‡®µ‡®ø‡©∞‡®ó‡©Ä ‡®ü‡©á‡®¢‡©Ä ‡®ú‡®ø‡®π‡©Ä ‡®Ü‡®ï‡©ç‡®∞‡®ø‡®§‡©Ä ‡®¨‡®£‡©Ä ‡®π‡©ã‡®à ‡®∏‡©Ä‡•§ ‡®Ö‡®ó‡®≤‡©á ‡®™‡©∞‡®®‡©á ‚Äò‡®§‡©á ‡®á‡©±‡®ï ‡®Ü‡®∞‡®ü‡©Ä‡®ï‡®≤ ‡®≤‡®ø‡®ñ‡®ø‡®Ü ‡®π‡©ã‡®á‡®Ü ‡®∏‡©Ä,‡®ú‡©ã ‡®ï‡©Å‡©±‡®ù ‡®á‡®∏ ‡®§‡®∞‡©ç‡®π‡®æ‡®Ç ‡®∏‡©Ä :-</p>

<p>A cafeteria in USA started by Ashnoor along with his spouse Uliya and cousin brother Kapil. Ashnoor was handling management and cash counter while Uliya was the chef. Kapil was working as a waiter, cleaning tables, taking customer orders, serving food. Later on the cafeteria which was serving tea and coffee was turned into a mini tuck shop due to the efforts of trio where they firstly stated serving Aaloo ka parantha with curd &amp; whey, the traditional Punjabi recipe. There were a lot of Indian people living solemnly &amp; with families who weren‚Äôt having enough time to cook the various recipe due to lack of time. As it was a business class area so most people were working for their livings &amp; busy in earning. This cafeteria become famous in town &amp; then soon Ashnoor decided to turn it in a restaurant. But this wasn‚Äôt the because of investment &amp; hardwork of Ashnoor &amp; Uliya but also the efforts of Kapil. He had suggested Ashnoor to open the cafeteria. Uliya named it USA cafeteria but Kapil insisted to change the same as U$A cafeteria. To turn it into mini hotel and then restaurant was the discussion of trio. Their business was growing up sufficiently but they were a bit tired sometimes with preparations. The popularity of their cafeteria wasn‚Äôt growing in start but Kapil advised Ashnoor to promote the cafeteria on social media aka Instagram Facebook &amp; YouTube. This job was very well done by Ashnoor and even customer supported them because they were getting good services. Many customers and bypassers were amazed by unique name of cafeteria <strong>U$A</strong> instead of USA. This was the very first idea of Kapil before starting this small business.</p>

<p>U=Uliya</p>

<p>$=source of income and happiness</p>

<p>A=Ashnoor</p>

<p>But do you know who are those trio ?</p>

<p>‡®Ö‡®ó‡®≤‡©á ‡®™‡©∞‡®®‡©á ‡®ñ‡®º‡®æ‡®≤‡©Ä ‡®∏‡®®‡•§ ‡®ñ‡©å‡®∞‡©á ‡®ï‡®π‡®æ‡®£‡©Ä ‡®Æ‡©Å‡©±‡®ï ‡®ó‡®à ‡®∏‡©Ä ‡®ú‡®æ‡®Ç ‡®Ö‡©∞‡®¨‡®∞ ‡®®‡©á ‡®á‡®∏ ‡®®‡©Ç‡©∞ ‡®µ‡®ø‡®∞‡®æ‡®Æ ‡®¶‡©á ‡®¶‡®ø‡©±‡®§‡®æ ‡®∏‡©Ä‡•§ ‡®ï‡©Å‡©±‡®ù ‡®∏‡®Æ‡©á‡®Ç ‡®≤‡®à ‡®Ö‡®®‡®Æ‡©ã‡®≤ ‡®∏‡©ã‡®ö‡©Ä‡®Ç ‡®™‡©à ‡®ó‡®ø‡®Ü‡•§ ‡®Ü‡®ñ‡®º‡®ø‡®∞ ‡®ï‡©å‡®£ ‡®∏‡®® ‡®á‡®π ‡®Ö‡®∏‡®º‡®®‡©Ç‡®∞,‡®Ø‡©Ç‡®≤‡©Ä‡®Ü ‡®§‡©á ‡®ï‡®™‡®ø‡®≤ ? ‡®•‡©ã‡©ú‡®æ ‡®¶‡®ø‡®Æ‡®æ‡®ó ‚Äò‡®§‡©á ‡®ú‡®º‡©ã‡®∞ ‡®¶‡©á‡®£ ‡®Æ‡®ó‡®∞‡©ã‡®Ç ‡®Ö‡®®‡®Æ‡©ã‡®≤ ‡®®‡©Ç‡©∞ ‡®∏‡®æ‡®∞‡©Ä ‡®ï‡®π‡®æ‡®£‡©Ä ‡®∏‡®Æ‡®ù ‡®Ü ‡®ó‡®à‡•§ ‡®Ö‡®ö‡®æ‡®®‡®ï ‡®ï‡©Å‡©±‡®ù ‡®°‡®ø‡©±‡®ó‡®£ ‡®¶‡©Ä ‡®Ü‡®µ‡®æ‡®ú‡®º ‡®Ü‡®à‡•§ ‡®¨‡©Ç‡®π‡©á ‡®µ‡®ø‡©±‡®ö ‡®Ö‡©∞‡®¨‡®∞ ‡®ñ‡©ú‡©ç‡®π‡®æ ‡®∏‡©Ä‡•§ ‡®â‡®∏ ‡®®‡©á ‡®Ö‡®®‡®Æ‡©ã‡®≤ ‡®®‡©Ç‡©∞ ‡®™‡©Å‡©±‡®õ‡®ø‡®Ü,‚Äù‡®ï‡©Ä ‡®π‡©ã‡®á‡®Ü?‚Äù
‚Äú‡®ú‡®æ‡®π ‡®Ø‡®æ‡®∞, ‡®∞‡®ø‡®π‡®æ ‡®®‡®æ ‡®§‡©Ç‡©∞ ‡®â‡®π‡©Ä ‡®õ‡©ã‡®ü‡©Ä ‡®∏‡©ã‡®ö ‡®µ‡®æ‡®≤‡®º‡®æ!‚Äù ‡®ï‡®π‡®ø‡®ï‡©á ‡®Ö‡®®‡®Æ‡©ã‡®≤ ‡®Ü‡®™‡®£‡©Ä ‡®ó‡©±‡®°‡©Ä ‡®µ‡®ø‡©±‡®ö ‡®¨‡©à‡®† ‡®ï‡©á ‡®ö‡®≤‡®æ ‡®ó‡®ø‡®Ü‡•§</p>

<p>‚Äú‡®Ü‡®π ‡®∞‡®ø‡®∏‡®º‡®§‡®æ ‡®µ‡©Ä ‡®§‡®ø‡©ú‡®ï ‡®ó‡®ø‡®Ü‡•§‚Äù ‡®π‡®æ‡®â‡®ï‡®æ ‡®≤‡©à‡®Ç‡®¶‡©á ‡®Ö‡©∞‡®¨‡®∞ ‡®¶‡©á ‡®Æ‡©Ç‡©∞‡®π‡©ã‡®Ç ‡®Ü‡®™ ‡®Æ‡©Å‡®π‡®æ‡®∞‡©á ‡®®‡®ø‡®ï‡®≤ ‡®™‡®ø‡®Ü‡•§</p>]]></content><author><name>Armaan</name></author><category term="literature" /><category term="punjabi" /><summary type="html"><![CDATA[‡®Ö‡®ß‡©Ç‡®∞‡©Ä ‡®ï‡®π‡®æ‡®£‡©Ä‡•§]]></summary></entry><entry><title type="html">‡®Æ‡©Å‡©ú‡®¶‡©á ‡®™‡®∞‡®ø‡©∞‡®¶‡©á</title><link href="https://thoughtstopen.com/murdhe-parindhe/" rel="alternate" type="text/html" title="‡®Æ‡©Å‡©ú‡®¶‡©á ‡®™‡®∞‡®ø‡©∞‡®¶‡©á" /><published>2023-02-21T21:53:00-07:00</published><updated>2023-02-21T21:53:00-07:00</updated><id>https://thoughtstopen.com/murdhe-parindhe</id><content type="html" xml:base="https://thoughtstopen.com/murdhe-parindhe/"><![CDATA[<p>‡®á‡©±‡®ï ‡®Æ‡®π‡©Ä‡®®‡®æ ‡®π‡©ã ‡®ó‡®ø‡®Ü ‡®∏‡©Ä ‡®Æ‡®®‡®ú‡©Ä‡®§ ‡®®‡©Ç‡©∞ ‡®Æ‡©∞‡®ú‡©á ‡®®‡®æ‡®≤ ‡®≤‡©±‡®ó‡©Ä ‡®®‡©Ç‡©∞, ‡®ï‡®Æ‡®≤‡®ø‡®Ü‡®Ç ‡®µ‡®æ‡®Ç‡®ó ‡®∏‡®æ‡®∞‡®æ ‡®∏‡®æ‡®∞‡®æ ‡®¶‡®ø‡®® ‡®¨‡©Ç‡®π‡©á ‡®µ‡©±‡®≤ ‡®§‡©±‡®ï‡®¶‡©Ä ‡®∞‡®π‡®ø‡©∞‡®¶‡©Ä ‡®∏‡©Ä‡•§ ‡®â‡®∏‡®¶‡©á ‡®ö‡©á‡®π‡®∞‡©á ‡®§‡©á ‡®Ö‡®ú‡©Ä‡®¨ ‡®ú‡®π‡©Ä ‡®Æ‡©Å‡®∞‡®¶‡®æ‡®∞ ‡®´‡©à‡®≤‡©Ä ‡®π‡©ã‡®à ‡®∏‡©Ä‡•§ ‡®∞‡©ã-‡®∞‡©ã ‡®ï‡©á ‡®â‡®∏‡®¶‡©Ä‡®Ü‡®Ç ‡®Ö‡©±‡®ñ‡®æ‡®Ç ‡®¶‡®æ ‡®™‡®æ‡®£‡©Ä ‡®µ‡©Ä ‡®∏‡©Å‡©±‡®ï ‡®ó‡®ø‡®Ü ‡®∏‡©Ä‡•§ ‡®â‡®∏‡®¶‡©Ä ‡®π‡®æ‡®≤‡®æ‡®§ ‡®á‡©∞‡®®‡©Ä ‡®¨‡©Å‡®∞‡©Ä ‡®ú‡®æ‡®™‡®¶‡©Ä ‡®∏‡©Ä ‡®ï‡©á ‡®µ‡©á‡®ñ ‡®ï‡©á ‡®§‡®∞‡®∏ ‡®Ü‡®â‡®Ç‡®¶‡®æ ‡®∏‡©Ä, ‡®™‡®∞ ‡®π‡©Å‡©∞‡®¶‡©Ä ‡®µ‡©Ä ‡®ï‡®Ø‡©ã‡®Ç ‡®®‡®æ‡•§ ‡®ú‡®ø‡®®‡©ç‡®π‡®æ‡®Ç ‡®Æ‡®æ‡®µ‡®æ‡®Ç ‡®¶‡©á ‡®™‡©Å‡©±‡®§ ‡®â‡®®‡©ç‡®π‡®æ‡®Ç ‡®¶‡©Ä‡®Ü‡®Ç ‡®Ö‡©±‡®ñ‡®æ ‡®∏‡®æ‡®π‡®µ‡©á‡®Ç ‡®ü‡©Å‡®∞ ‡®ú‡®æ‡®µ‡®£, ‡®â‡®®‡©ç‡®π‡®æ‡®Ç ‡®¶‡®æ ‡®ú‡©±‡®ó ‡®§‡©á ‡®ú‡®ø‡®â‡®£ ‡®ï‡©ã‡®à ‡®®‡®π‡©Ä ‡®π‡©Å‡©∞‡®¶‡®æ‡•§ ‡®â‡®π ‡®ú‡®ø‡®ì‡®Ç‡®¶‡©á ‡®ú‡©Ä ‡®Æ‡®∞ ‡®ú‡®æ‡®Ç‡®¶‡©Ä‡®Ü‡®Ç ‡®π‡®®‡•§</p>

<p>‡®Æ‡®®‡®ú‡©Ä‡®§ ‡®§‡©á ‡®â‡®π‡®¶‡©á ‡®ò‡®∞‡®µ‡®æ‡®≤‡©á ‡®®‡©á ‡®¨‡©ú‡©á ‡®§‡©∞‡®ó‡©Ä-‡®§‡©Å‡®∞‡®∏‡©Ä ‡®µ‡®æ‡®≤‡©á ‡®¶‡®ø‡®® ‡®ï‡©±‡®ü‡©á‡•§ ‡®≠‡©à‡®£ ‡®≠‡®∞‡®æ‡®µ‡®æ‡®Ç ‡®¶‡©Ä‡®Ü‡®Ç ‡®ï‡®¨‡©Ä‡®≤‡®¶‡®æ‡®∞‡©Ä‡®Ü‡®Ç ‡®µ‡©Ä ‡®®‡®ø‡®ú‡®ø‡©±‡®†‡©Ä‡®Ü‡®Ç‡•§ ‡®ò‡®∞ ‡®¶‡©á ‡®π‡®æ‡®≤‡®æ‡®§ ‡®ó‡®º‡®∞‡©Ä‡®¨‡©Ä ‡®ï‡®æ‡®∞‡®® ‡®Æ‡®æ‡©ú‡©á ‡®π‡©Å‡©∞‡®¶‡©á ‡®ó‡®è‡•§ ‡®á‡©±‡®ß‡®∞ ‡®¨‡©±‡®ö‡©á ‡®ú‡®µ‡®æ‡®® ‡®π‡©ã ‡®∞‡®π‡©á ‡®∏‡®®‡•§ ‡®µ‡©±‡®°‡®æ ‡®™‡©Å‡©±‡®§‡®∞ ‡®∏‡©Å‡®∞‡®ñ‡®º‡®æ‡®¨ ‡®§‡©á ‡®®‡®ø‡©±‡®ï‡©Ä ‡®ß‡©Ä ‡®≤‡®µ‡®≤‡©Ä‡®®‡•§ ‡®Æ‡®®‡®ú‡©Ä‡®§ ‡®á‡®∏ ‡®ó‡©±‡®≤ ‡®¶‡©á ‡®™‡©±‡®ñ ‡®µ‡®ø‡©±‡®ö ‡®¨‡®ø‡®≤‡®ï‡©Å‡®≤ ‡®®‡®π‡©Ä‡®Ç ‡®∏‡©Ä ‡®ï‡®ø ‡®ú‡©ã ‡®¶‡®ø‡®® ‡®â‡®®‡©ç‡®π‡®æ‡®Ç ‡®®‡©á ‡®µ‡©á‡®ñ‡©á, ‡®ú‡©ã ‡®ó‡®º‡®∞‡©Ä‡®¨‡©Ä ‡®â‡®®‡©ç‡®π‡®æ‡®Ç ‡®®‡©á ‡®π‡©∞‡®¢‡®æ‡®à, ‡®¨‡©±‡®ö‡®ø‡®Ü‡®Ç ‡®®‡©Ç‡©∞ ‡®µ‡©Ä ‡®ì‡®π‡©Ä ‡®∏‡®≠ ‡®ù‡©á‡®≤‡®£‡®æ ‡®™‡®µ‡©á‡•§ ‡®â‡©±‡®§‡©ã‡®Ç ‡®µ‡©á‡®≤ ‡®µ‡®æ‡®Ç‡®ó ‡®µ‡®ß‡®¶‡©Ä ‡®ú‡®æ ‡®∞‡®π‡©Ä ‡®≤‡®µ‡®≤‡©Ä‡®® ‡®¶‡©á ‡®µ‡®ø‡®Ü‡®π ‡®¶‡©Ä ‡®´‡®ø‡®ï‡®∞ ‡®µ‡©Ä ‡®ì‡®π‡®®‡©Ç‡©∞ ‡®µ‡©±‡®¢ ‡®µ‡©±‡®¢ ‡®ñ‡®æ ‡®∞‡®π‡©Ä ‡®∏‡©Ä‡•§</p>

<p>‡®ö‡©∞‡®π ‡®ï‡©Å ‡®∏‡®æ‡®≤ ‡®™‡®π‡®ø‡®≤‡®æ‡®Ç ‡®ï‡©å‡©ú‡®æ ‡®ò‡©Å‡©±‡®ü ‡®≠‡®∞‡®ï‡©á ‡®â‡®®‡©ç‡®π‡®æ‡®Ç ‡®Ü‡®™‡®£‡©á ‡®π‡®ø‡©±‡®∏‡©á ‡®¶‡©á ‡®ö‡®æ‡®∞ ‡®õ‡®ø‡©±‡®≤‡©ú ‡®µ‡©á‡®ö‡®ï‡©á ‡®∏‡©Å‡®∞‡®ñ‡®º‡®æ‡®¨ ‡®®‡©Ç‡©∞ ‡®™‡©à‡®∏‡©á ‡®ï‡®Æ‡®æ‡®â‡®£ ‡®¨‡®æ‡®π‡®∞‡®≤‡©á ‡®Æ‡©Å‡®≤‡®ñ ‡®≠‡©á‡®ú ‡®¶‡®ø‡©±‡®§‡®æ‡•§ ‡®ï‡®π‡®ø‡©∞‡®¶‡©á ‡®®‡©á ‡®ï‡®ø ‡®¶‡®ø‡®® ‡®π‡®Æ‡©á‡®∏‡®º‡®æ ‡®á‡©±‡®ï‡©ã ‡®ú‡®ø‡®π‡©á ‡®®‡®π‡©Ä‡®Ç ‡®∞‡®π‡®ø‡©∞‡®¶‡©á, ‡®∏‡©Å‡®∞‡®ñ‡®º‡®æ‡®¨ ‡®ï‡®Æ‡®æ‡®ä ‡®Æ‡®æ‡®Ç-‡®™‡®ø‡®ì ‡®¶‡®æ ‡®ï‡®Æ‡®æ‡®ä ‡®™‡©Å‡©±‡®§‡®∞ ‡®®‡®ø‡®ï‡®≤‡®ø‡®Ü‡•§ ‡®õ‡©á‡®§‡©Ä ‡®π‡©Ä ‡®â‡®π ‡®ò‡®∞ ‡®™‡©à‡®∏‡©á ‡®≠‡©á‡®ú‡®£ ‡®≤‡©±‡®ó ‡®™‡®ø‡®Ü‡•§ ‡®¶‡©ã ‡®ï‡©Å ‡®µ‡®∞‡©ç‡®π‡©á ‡®¨‡®æ‡®Ö‡®¶ ‡®∏‡©ã‡®π‡®£‡®æ ‡®ú‡®ø‡®π‡®æ ‡®ò‡®∞-‡®¨‡®æ‡®∞ ‡®§‡©á ‡®∏‡©Å‡©∞‡®ò‡©ú ‡®∏‡®ø‡®Ü‡®£‡®æ ‡®Æ‡©Å‡©∞‡®°‡®æ ‡®≤‡©±‡®≠ ‡®ï‡©á ‡®®‡®ø‡©±‡®ï‡©Ä ‡®≤‡®µ‡®≤‡©Ä‡®® ‡®¶‡®æ ‡®µ‡®ø‡®Ü‡®π ‡®ï‡®∞ ‡®≤‡®ø‡®Ü ‡®ó‡®ø‡®Ü‡•§ ‡®∏‡©Å‡®∞‡®ñ‡®º‡®æ‡®¨ ‡®®‡©á ‡®Ü‡®â‡®£ ‡®≤‡®à ‡®õ‡©Å‡©±‡®ü‡©Ä ‡®µ‡©Ä ‡®≠‡®∞ ‡®¶‡®ø‡©±‡®§‡©Ä‡•§ ‡®∞‡©±‡®ñ‡©ú‡©Ä ‡®§‡©ã‡®Ç ‡®ö‡©∞‡®π ‡®ï‡©Å ‡®¶‡®ø‡®®‡®æ‡®Ç ‡®Æ‡®ó‡®∞‡©ã‡®Ç ‡®®‡®ø‡©±‡®ï‡©Ä ‡®¶‡©Ä ‡®°‡©ã‡®≤‡©Ä ‡®§‡©Å‡®∞‡®®‡©Ä ‡®∏‡©Ä‡•§ ‡®™‡®∞ ‡®∏‡©Å‡®∞‡®ñ‡®º‡®æ‡®¨ ‡®Æ‡©å‡®ï‡©á ‚Äò‡®§‡©á ‡®®‡®π‡©Ä‡®Ç ‡®™‡®π‡©Å‡©∞‡®ö ‡®∏‡®ï‡®ø‡®Ü‡•§ ‡®µ‡©Ä‡®∞ ‡®®‡©Ç‡©∞ ‡®â‡®°‡©Ä‡®ï‡®¶‡©Ä ‡®®‡®ø‡©±‡®ï‡©Ä, ‡®≠‡®∞‡©Ä‡®Ü‡®Ç ‡®Ö‡©±‡®ñ‡®æ‡®Ç ‡®®‡®æ‡®≤ ‡®¨‡®æ‡®¨‡©Å‡®≤ ‡®¶‡©á ‡®µ‡®ø‡®π‡©ú‡©á ‡®§‡©ã‡®Ç ‡®µ‡®ø‡®¶‡®æ ‡®π‡©ã‡®à‡•§</p>

<p>‡®Æ‡®®‡®ú‡©Ä‡®§ ‡®á‡®∏ ‡®™‡®æ‡®∏‡©á ‡®§‡©ã‡®Ç ‡®§‡®æ‡®Ç ‡®∏‡©Å‡®∞‡®ñ‡®∞‡©Ç ‡®π‡©ã ‡®ö‡©Å‡©±‡®ï‡©Ä ‡®∏‡©Ä ‡®ï‡®ø ‡®ß‡©Ä ‡®¶‡®æ ‡®ò‡®∞ ‡®µ‡©±‡®∏ ‡®ó‡®ø‡®Ü, ‡®™‡®∞ ‡®ï‡©±‡®≤‡©Ä ‡®®‡©Ç‡©∞ ‡®π‡©Å‡®£ ‡®ò‡®∞ ‡®µ‡©±‡®¢ ‡®ñ‡®æ‡®£ ‡®®‡©Ç‡©∞ ‡®Ü‡®â‡®Ç‡®¶‡®æ ‡®∏‡©Ä‡•§ ‡®â‡®π ‡®π‡©Å‡®£ ‡®ö‡®æ‡®π‡©Å‡©∞‡®¶‡©Ä ‡®∏‡©Ä ‡®ï‡®ø ‡®ò‡®∞ ‡®µ‡®ø‡®ö ‡®®‡©Ç‡©∞‡®π ‡®Ü ‡®ú‡®æ‡®µ‡©á ‡®§‡©á ‡®ò‡®∞ ‡®¨‡©±‡®ö‡®ø‡®Ü‡®Ç ‡®®‡®æ‡®≤ ‡®≠‡®∞ ‡®ú‡®æ‡®µ‡©á‡•§ ‡®∏‡®ø‡®Ü‡®£‡©á ‡®µ‡©Ä ‡®ï‡®π‡®ø‡©∞‡®¶‡©á ‡®π‡®® ‡®ï‡®ø ‡®¶‡©å‡®≤‡®§‡®æ‡®Ç ‡®≠‡®æ‡®µ‡©á‡®Ç ‡®≤‡©±‡®ñ ‡®π‡©ã‡®£ ‡®™‡®∞ ‡®î‡®≤‡®æ‡®¶ ‡®§‡©ã‡®Ç ‡®µ‡©±‡®°‡©Ä ‡®ï‡©ã‡®à ‡®¶‡©å‡®≤‡®§ ‡®®‡®π‡©Ä‡®Ç ‡®π‡©Å‡©∞‡®¶‡©Ä‡•§ ‡®®‡®ø‡©±‡®ï‡©á-‡®®‡®ø‡©±‡®ï‡©á ‡®¨‡©±‡®ö‡©á ‡®ò‡®∞ ‡®µ‡®ø‡©±‡®ö ‡®∞‡©å‡®£‡®ï ‡®≤‡®æ‡®à ‡®∞‡©±‡®ñ‡®¶‡©á ‡®π‡®®‡•§ ‡®Æ‡®ï‡®æ‡®® ‡®µ‡©Ä ‡®µ‡®ß‡©Ä‡®Ü ‡®¨‡®£ ‡®ó‡®ø‡®Ü ‡®∏‡©Ä ‡®§‡©á ‡®π‡©å‡®≤‡©Ä-‡®π‡©å‡®≤‡©Ä ‡®Æ‡®®‡®ú‡©Ä‡®§ ‡®®‡©á ‡®∏‡©Å‡®∞‡®ñ‡®º‡®æ‡®¨ ‡®≤‡®à ‡®µ‡®π‡©Å‡®ü‡©Ä ‡®≤‡©±‡®≠‡®£‡©Ä ‡®µ‡©Ä ‡®∏‡®º‡©Å‡®∞‡©Ç ‡®ï‡®∞ ‡®¶‡®ø‡©±‡®§‡©Ä‡•§ ‡®™‡©Å‡©±‡®§ ‡®¶‡©á ‡®µ‡®ø‡®Ü‡®π ‡®¶‡®æ ‡®ö‡®æ‡®Ö ‡®â‡®∏‡®¶‡©á ‡®¶‡®ø‡®≤ ‡®µ‡®ø‡©±‡®ö ‡®π‡®ø‡®≤‡©ã‡®∞‡©á ‡®≤‡©à ‡®∞‡®ø‡®π‡®æ ‡®∏‡©Ä‡•§</p>

<p>‡®á‡©±‡®ï ‡®Æ‡®π‡©Ä‡®®‡©á ‡®™‡®π‡®ø‡®≤‡®æ‡®Ç ‡®∏‡©Å‡®∞‡®ñ‡®º‡®æ‡®¨ ‡®®‡©Ç‡©∞ ‡®õ‡©Å‡©±‡®ü‡©Ä ‡®¶‡©Ä ‡®Æ‡©∞‡®ú‡©Ç‡®∞‡©Ä ‡®Æ‡®ø‡®≤ ‡®ó‡®à ‡®∏‡©Ä‡•§ ‡®â‡®π ‡®¨‡®æ‡®π‡®∞‡®≤‡©á ‡®Æ‡©Å‡®≤‡®ñ‡©ã ‡®™‡©∞‡®ú‡®æ‡®¨ ‡®™‡®∞‡®§‡®£ ‡®≤‡®à ‡®ò‡®∞ ‡®§‡©ã‡®Ç ‡®®‡®ø‡©±‡®ï‡®≤‡®ø‡®Ü ‡®§‡®æ‡®Ç ‡®Ö‡®∏‡®¨‡®æ‡®¨ ‡®≤‡©à ‡®ï‡©á ‡®ú‡®æ ‡®∞‡®π‡©á ‡®á‡©±‡®ï ‡®¨‡©á‡®ï‡®æ‡®¨‡©Ç ‡®ü‡®∞‡©±‡®ï ‡®π‡©á‡®†‡®æ‡®Ç ‡®Ü ‡®ó‡®ø‡®Ü‡•§ ‡®ú‡®¶‡©ã‡®Ç ‡®á‡®π ‡®ñ‡®º‡®¨‡®∞ ‡®™‡©∞‡®ú‡®æ‡®¨ ‡®™‡®π‡©Å‡©∞‡®ö‡©Ä ‡®§‡®æ‡®Ç ‡®™‡©Ç‡®∞‡©á ‡®™‡®ø‡©∞‡®° ‡®µ‡®ø‡©±‡®ö ‡®¶‡©Å‡®π‡®æ‡®à ‡®Æ‡©±‡®ö ‡®ó‡®à‡•§ ‡®™‡©Å‡©±‡®§‡®∞ ‡®¶‡©Ä ‡®Æ‡©å‡®§ ‡®¶‡©Ä ‡®ñ‡®º‡®¨‡®∞ ‡®∏‡©Å‡®£‡®ï‡©á ‡®Æ‡®®‡®ú‡©Ä‡®§ ‡®®‡©Ç‡©∞ ‡®ó‡®º‡®∏‡®º ‡®™‡©à-‡®™‡©à ‡®ú‡®æ‡®Ç‡®¶‡©á ‡®∏‡®®‡•§ ‡®â‡®∏‡®®‡©Ç‡©∞ ‡®ú‡®¶ ‡®µ‡©Ä ‡®π‡©ã‡®∏‡®º ‡®Ü‡®â‡®Ç‡®¶‡©Ä ‡®§‡®æ‡®Ç ‡®â‡®π ‡®Ö‡®ú‡®ø‡®π‡©á ‡®µ‡©à‡®£ ‡®™‡®æ‡®â‡®Ç‡®¶‡©Ä ‡®ú‡®ø‡®®‡©ç‡®π‡®æ‡®Ç ‡®®‡©Ç‡©∞ ‡®∏‡©Å‡®£‡®ï‡©á ‡®ï‡®≤‡©á‡®ú‡®æ ‡®™‡®æ‡®ü‡®£ ‡®®‡©Ç‡©∞ ‡®Ü‡®â‡®Ç‡®¶‡®æ ‡®∏‡©Ä‡•§ ‡®∏‡©Å‡©±‡®ñ‡®æ‡®Ç ‡®∏‡©Å‡®ñ ‡®∏‡©Å‡®ñ ‡®ï‡©á ‡®≤‡®ø‡®Ü ‡®™‡©Å‡©±‡®§ ‡®Ö‡©±‡®ú ‡®∞‡©±‡®¨ ‡®®‡©á ‡®ñ‡©ã‡®π ‡®≤‡®ø‡®Ü ‡®∏‡©Ä‡•§ ‡®∏‡©Å‡®∞‡®ñ‡®º‡®æ‡®¨ ‡®â‡®∏ ‡®∞‡®æ‡®π ‡®§‡©á ‡®ö‡®≤‡®æ ‡®ó‡®ø‡®Ü ‡®∏‡©Ä ‡®ú‡®ø‡®•‡©ã‡®Ç ‡®ï‡©ã‡®à ‡®®‡®π‡©Ä‡®Ç ‡®Æ‡©Å‡©ú ‡®∏‡®ï‡®¶‡®æ‡•§ ‡®Ö‡©±‡®ú ‡®Æ‡®æ‡®Ç ‡®¶‡©Ä ‡®ù‡©ã‡®≤‡©Ä ‡®ñ‡®æ‡®≤‡©Ä ‡®∞‡®π‡®ø ‡®ó‡®à ‡®∏‡©Ä‡•§ ‡®â‡®∏‡®¶‡©á ‡®∏‡®æ‡®∞‡©á ‡®Ö‡®∞‡®Æ‡®æ‡®® ‡®µ‡®≤‡©Ç‡©∞‡®ß‡®∞‡©á ‡®ó‡®è ‡®∏‡®®‡•§ ‡®®‡®ø‡©±‡®ï‡©Ä ‡®¶‡©á ‡®π‡©∞‡®ù‡©Ç ‡®∞‡©Å‡®ï‡®£ ‡®¶‡®æ ‡®®‡®æ‡®Ç ‡®®‡®π‡©Ä‡®Ç ‡®≤‡©à ‡®∞‡®π‡©á ‡®∏‡®®‡•§ ‡®â‡®π ‡®§‡®æ‡®Ç ‡®ö‡©å‡®π ‡®∏‡®æ‡®≤‡®æ‡®Ç ‡®§‡©ã‡®Ç ‡®µ‡©Ä‡®∞ ‡®®‡©Ç‡©∞ ‡®∞‡©±‡®ñ‡©ú‡©Ä ‡®¨‡©∞‡®®‡®£ ‡®®‡©Ç‡©∞ ‡®§‡®∞‡®∏‡®¶‡©Ä ‡®™‡®à ‡®∏‡©Ä‡•§ ‡®≤‡©ã‡®ï‡©Ä ‡®π‡©å‡®Ç‡®∏‡®≤‡®æ ‡®∞‡©±‡®ñ‡®£‡®æ ‡®≤‡®à ‡®§‡©á ‡®∞‡©±‡®¨ ‡®¶‡®æ ‡®≠‡®æ‡®£‡®æ ‡®Æ‡©∞‡®®‡®£ ‡®≤‡®à ‡®ï‡®π‡®ø ‡®ï‡©á ‡®ú‡®æ‡®à ‡®ú‡®æ ‡®∞‡®π‡©á ‡®∏‡®®‡•§</p>

<p>‚Ä¶‡®§‡©á ‡®Ö‡©±‡®ú ‡®µ‡©Ä ‡®Æ‡®®‡®ú‡©Ä‡®§ ‡®∏‡®¨‡®æ‡®§ ‡®µ‡®ø‡©±‡®ö ‡®ï‡©∞‡®ß ‡®®‡©Ç‡©∞ ‡®¢‡©ã‡®Ö ‡®≤‡®æ‡®à ‡®Æ‡©∞‡®ú‡©á ‡®§‡©á ‡®¨‡©à‡®†‡©Ä ‡®∏‡©Ä‡•§ ‡®â‡®∏‡®¶‡©Ä ‡®®‡®ú‡®º‡®∞ ‡®Ö‡®∏‡®Æ‡®æ‡®® ‡®§‡©á ‡®â‡©±‡®°‡®¶‡©á ‡®™‡®∞‡®ø‡©∞‡®¶‡®ø‡®Ü‡®Ç ‡®µ‡©±‡®≤ ‡®∏‡©Ä ‡®ú‡©ã ‡®Ü‡®™‡©ã ‡®Ü‡®™‡®£‡©á ‡®ò‡®∞‡®æ‡®Ç ‡®®‡©Ç‡©∞ ‡®Æ‡©Å‡©ú ‡®∞‡®π‡©á ‡®∏‡®®‡•§ ‡®∏‡®º‡®æ‡®á‡®¶ ‡®â‡®∏‡®®‡©Ç‡©∞ ‡®Ö‡®ú‡©á ‡®µ‡©Ä ‡®Ü‡®™‡®£‡©á ‡®™‡©Å‡©±‡®§‡®∞ ‡®¶‡©á ‡®™‡®∞‡®§ ‡®Ü‡®â‡®£ ‡®¶‡©Ä ‡®Ü‡®∏ ‡®∏‡©Ä‡•§ ‡®®‡®ø‡©±‡®ï‡©Ä ‡®®‡©á ‡®â‡®∏‡®®‡©Ç‡©∞ ‡®π‡©å‡®≤‡©Ä ‡®ú‡®ø‡®π‡©á ‡®ö‡®æ‡®π ‡®™‡©Ä‡®£ ‡®≤‡®à ‡®Ü‡®µ‡®æ‡®ú‡®º ‡®Æ‡®æ‡®∞‡©Ä‡•§ ‡®™‡®∞ ‡®Æ‡®®‡®ú‡©Ä‡®§ ‡®®‡©á ‡®ï‡©ã‡®à ‡®ú‡®µ‡®æ‡®¨ ‡®®‡®æ ‡®¶‡®ø‡©±‡®§‡®æ‡•§ ‡®¶‡©ã ‡®§‡®ø‡©∞‡®® ‡®µ‡®æ‡®∞ ‡®¨‡©Å‡®≤‡®æ‡®â‡®£ ‡®§‡©á ‡®µ‡©Ä ‡®ú‡®¶ ‡®ï‡©ã‡®à ‡®ú‡®µ‡®æ‡®¨ ‡®®‡®æ ‡®Æ‡®ø‡®≤‡®ø‡®Ü ‡®§‡®æ‡®Ç ‡®®‡®ø‡©±‡®ï‡©Ä ‡®®‡©á ‡®â‡®∏‡®®‡©Ç‡©∞ ‡®π‡®≤‡©Ç‡®£‡®ø‡®Ü‡®Ç ‡®™‡®∞ ‡®Æ‡®®‡®ú‡©Ä‡®§ ‡®¶‡®æ ‡®¨‡©á‡®ú‡®æ‡®® ‡®∏‡®∞‡©Ä‡®∞ ‡®á‡©±‡®ï ‡®™‡®æ‡®∏‡©á ‡®®‡©Ç‡©∞ ‡®Æ‡©∞‡®ú‡©á ‡®â‡©±‡®§‡©á ‡®≤‡©Å‡©ú‡®ï ‡®ó‡®ø‡®Ü‡•§ ‡®®‡®ø‡©±‡®ï‡©Ä ‡®â‡®∏‡®®‡©Ç‡©∞ ‡®Æ‡®æ‡®Ç ‡®Æ‡®æ‡®Ç ‡®ï‡®π‡®ø‡®ï‡©á ‡®Ö‡®µ‡®æ‡®ú‡®º‡®æ‡®Ç ‡®Æ‡®æ‡®∞‡©Ä ‡®ú‡®æ ‡®∞‡®π‡©Ä ‡®∏‡©Ä ‡®™‡®∞ ‡®Æ‡®æ‡®Ç ‡®Ü‡®™‡®£‡©á ‡®∏‡©Å‡®∞‡®ñ‡®º‡®æ‡®¨ ‡®ï‡©ã‡®≤ ‡®ú‡®æ ‡®ö‡©Å‡©±‡®ï‡©Ä ‡®∏‡©Ä ‡•§</p>

<p>(‡®∏‡®Æ‡®æ‡®™‡®§)</p>]]></content><author><name>Armaan</name></author><category term="literature" /><category term="punjabi" /><summary type="html"><![CDATA[‡®á‡®ï ‡®ï‡®π‡®æ‡®£‡©Ä ‡®ï‡®¶‡©á ‡®®‡®æ ‡®™‡©Ç‡®∞‡©Ä ‡®π‡©ã‡®£ ‡®µ‡®æ‡®≤‡©Ä ‡®â‡®Æ‡©Ä‡®¶ ‡®¶‡©Ä‡•§]]></summary></entry><entry><title type="html">Welcome to Thoughts To Pen!</title><link href="https://thoughtstopen.com/welcome-to-thoughtstopen/" rel="alternate" type="text/html" title="Welcome to Thoughts To Pen!" /><published>2021-09-29T00:22:39-06:00</published><updated>2021-09-29T00:22:39-06:00</updated><id>https://thoughtstopen.com/welcome-to-thoughtstopen</id><content type="html" xml:base="https://thoughtstopen.com/welcome-to-thoughtstopen/"><![CDATA[]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[]]></summary></entry></feed>